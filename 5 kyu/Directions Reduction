//In ["NORTH", "SOUTH", "EAST", "WEST"], the direction "NORTH" + "SOUTH" is going north and coming back right away.

//The path becomes ["EAST", "WEST"], now "EAST" and "WEST" annihilate each other, therefore, the final result is [] (nil in Clojure).

//In ["NORTH", "EAST", "WEST", "SOUTH", "WEST", "WEST"], "NORTH" and "SOUTH" are not directly opposite but they become directly
//opposite after the reduction of "EAST" and "WEST" so the whole path is reducible to ["WEST", "WEST"].

//Task
//Write a function dirReduc which will take an array of strings and returns an array of strings with the needless directions removed
//(W<->E or S<->N side by side).

//The Haskell version takes a list of directions with data Direction = North | East | West | South.
//The Clojure version returns nil when the path is reduced to nothing.
//The Rust version takes a slice of enum Direction {NORTH, SOUTH, EAST, WEST}.
//See more examples in "Sample Tests:"

//Notes
//Not all paths can be made simpler. The path ["NORTH", "WEST", "SOUTH", "EAST"] is not reducible. "NORTH" and "WEST", "WEST" and "SOUTH",
//"SOUTH" and "EAST" are not directly opposite of each other and can't become such. Hence the result path is
//itself : ["NORTH", "WEST", "SOUTH", "EAST"].

using System;
using System.Collections.Generic;
using System.Linq;

public class DirReduction 
{
  public static string[] dirReduc(String[] arr) 
  {
    List<string> list = new List<string>(arr);
    
    for (int i=0; i< list.Count; i++)
    {
      if (list[i] == "NORTH" && i + 1 < list.Count && list[i+1] == "SOUTH")
      {
        list.RemoveAt(i);
        list.RemoveAt(i); 
        i = 0;
      }
      else if (list[i] == "NORTH" && i-1 >= 0 && list[i-1] == "SOUTH")
      {
        list.RemoveAt(--i);
        list.RemoveAt(i);
         i = 0;
      }
      else if (list[i] == "SOUTH" && i + 1 < list.Count && list[i+1] == "NORTH")
      {
        list.RemoveAt(i);
        list.RemoveAt(i); 
        i = 0;
      }
      else if (list[i] == "SOUTH" && i-1 >= 0 && list[i-1] == "NORTH")
      {
        list.RemoveAt(--i);
        list.RemoveAt(i);
         i = 0;
      }
      else if (list[i] == "EAST" && i + 1 < list.Count && list[i+1] == "WEST")
      {
        list.RemoveAt(i);
        list.RemoveAt(i); 
        i = 0;
      }
      else if (list[i] == "EAST" && i-1 >= 0 && list[i-1] == "WEST")
      {
        list.RemoveAt(--i);
        list.RemoveAt(i);
         i = 0;
      }
      else if (list[i] == "WEST" && i + 1 < list.Count && list[i+1] == "EAST")
      {
        list.RemoveAt(i);
        list.RemoveAt(i); 
        i = 0;
      }
      else if (list[i] == "WEST" && i + 1 < list.Count && list[i+1] == "EAST")
      {
        list.RemoveAt(i);
        list.RemoveAt(i); 
        i = 0;
      }
    }

    return list.ToArray();
  }
}
