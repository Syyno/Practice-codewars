//My friend John and I are members of the "Fat to Fit Club (FFC)". John is worried because each month a list with the weights of members
//is published and each month he is the last on the list which means he is the heaviest.

//I am the one who establishes the list so I told him: "Don't worry any more, I will modify the order of the list". It was decided to 
//attribute a "weight" to numbers. The weight of a number will be from now on the sum of its digits.

//For example 99 will have "weight" 18, 100 will have "weight" 1 so in the list 100 will come before 99. Given a string with the weights
//of FFC members in normal order can you give this string ordered by "weights" of these numbers?

//Example:
//"56 65 74 100 99 68 86 180 90" ordered by numbers weights becomes: "100 180 90 56 65 74 68 86 99"

//When two numbers have the same "weight", let us class them as if they were strings (alphabetical ordering) and not numbers: 100 is
//before 180 because its "weight" (1) is less than the one of 180 (9) and 180 is before 90 since, having the same "weight" (9), it comes
//before as a string.

//All numbers in the list are positive numbers and the list can be empty.

using System;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;

public class WeightSort {

	public static string orderWeight(string strng) {
  
    strng = Regex.Replace(strng, @"\s+", " ");
    string[] strings = strng.Split(" ");
    List<string> list = strings.ToList();
    list.Sort();

    int calcWeight(string s1, string s2)
    {
        int w1 = 0;
        int w2 = 0;
        foreach (char c in s1)
        {
            w1 += Int32.Parse(c.ToString());
        }
        foreach (char c in s2)
        {      
            w2 += Int32.Parse(c.ToString());
        }

        return w1 > w2 ? 1 : w1 == w2 ? 0 : -1;
    }

    for (int i = 0; i < strings.Length; i++)
    {
        for (int j = 0; j < strings.Length - 1 - i; j++)
        {
            int x = calcWeight(strings[j], strings[j + 1]);
            if (x == 1)
            {
                string tmp = strings[j];
                strings[j] = strings[j + 1];
                strings[j + 1] = tmp;
                continue;
            }
            else if (x == 0)
            {
                if (list.IndexOf(strings[j]) > list.IndexOf(strings[j + 1]))
                {
                    string tmp = strings[j];
                    strings[j] = strings[j + 1];
                    strings[j + 1] = tmp;
                }
            }
        }
    }
    
    return String.Join(" ", strings); 
	}
}
