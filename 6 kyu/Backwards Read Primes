//Backwards Read Primes are primes that when read backwards in base 10 (from right to left) are a different prime.
//(This rules out primes which are palindromes.)

//Examples:
//13 17 31 37 71 73 are Backwards Read Primes
//13 is such because it's prime and read from right to left writes 31 which is prime too. Same for the others.

//Task
//Find all Backwards Read Primes between two positive given numbers (both inclusive), the second one always being greater than or equal 
//to the first one. The resulting array or the resulting string will be ordered following the natural order of the prime numbers.

//Example
//backwardsPrime(2, 100) => [13, 17, 31, 37, 71, 73, 79, 97] backwardsPrime(9900, 10000) => [9923, 9931, 9941, 9967] 
//backwardsPrime(501, 599) => []

//Note for Forth
//Return only the first backwards-read prime between start and end or 0 if you don't find any

//backwardsPrime(2, 100) => "13 17 31 37 71 73 79 97"
//backwardsPrime(9900, 10000) => "9923 9931 9941 9967"


using System;
using System.Collections.Generic;

public class BackWardsPrime 
{
	public static string backwardsPrime(long start, long end) 
  {
  
		  bool isPrime(long num)
      {
          bool b = true;
          for (long j = 2; j <= Math.Sqrt(num); j++)
          {
              if (num % j == 0)
              {
                  b = false;
                  break;
              }
          }
          return b;
      }
      
      List<long> list = new List<long>();
      for (long i = start; i <= end; i++)
      {
          if (isPrime(i))
          {
              list.Add(i);
          }
      }

      List<string> backwardsList = new List<string>();
      foreach (long n in list)
      {
          char[] ch = n.ToString().ToCharArray();
          Array.Reverse(ch);
         // string ss = String.Concat(ch);
          long tmp = Convert.ToInt64(String.Concat(ch));
          if (isPrime(tmp) && tmp >=13)
          {
              backwardsList.Add(n.ToString());
          }
      }

      string res = "";
      foreach (string s in backwardsList)
      {
          char[] cc = s.ToCharArray();
          Array.Reverse(cc);
          string ss = String.Concat(cc);
          if (ss == s)
            continue;
          res += (s + ' ');
      }
         
      return res.Trim();
	}
}
