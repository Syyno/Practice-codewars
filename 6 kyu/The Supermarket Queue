//There is a queue for the self-checkout tills at the supermarket. Your task is write a function to calculate the total
//time required for all the customers to check out!

//input
//customers: an array of positive integers representing the queue. Each integer represents a customer, and its value is the
//amount of time they require to check out.
//n: a positive integer, the number of checkout tills.
//output
//The function should return an integer, the total time required.

//Examples
//queueTime([5,3,4], 1)
// should return 12
// because when there is 1 till, the total time is just the sum of the times

queueTime([10,2,3,3], 2)
// should return 10
// because here n=2 and the 2nd, 3rd, and 4th people in the 
// queue finish before the 1st person has finished.

queueTime([2,3,10], 2)
// should return 12


using System;
using System.Collections.Generic;
using System.Linq;

public class Kata
{
    public static long QueueTime(int[] customers, int n)
    {
      List<int> queue = customers.ToList();
      int[] ontills = new int[n];
      
      if (customers.Length == 0 || n == 0)
          return 0;     
      if (n == 1)
        return queue.Sum();    
      if (n >= queue.Count)
        return queue.Max();

      for (int i = 0; i < n; i++)
      {
        ontills[i] = queue[0];
        queue.RemoveAt(0);  
      }
      
      while (queue.Count > 0)
      { 
        int low = ontills.Min();
        int lowindex = Array.IndexOf(ontills, low);
        ontills[lowindex] = low + queue[0];
        queue.RemoveAt(0);
      }
      
      return ontills.Max();  
    }
}
